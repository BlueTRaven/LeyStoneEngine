// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: World.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LeyStoneEngine {

  /// <summary>Holder for reflection information generated from World.proto</summary>
  public static partial class WorldReflection {

    #region Descriptor
    /// <summary>File descriptor for World.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WorldReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtXb3JsZC5wcm90bxIOTGV5U3RvbmVFbmdpbmUiIQoJU2VyVmVjdG9yEgkK",
            "AXgYASABKAISCQoBeRgCIAEoAiJ2CglTZXJFbnRpdHkSDAoEdHlwZRgBIAEo",
            "BRIPCgdzdWJUeXBlGAIgASgFEisKCHBvc2l0aW9uGAMgASgLMhkuTGV5U3Rv",
            "bmVFbmdpbmUuU2VyVmVjdG9yEh0KFWFkZGl0aW9uYWxJbmZvcm1hdGlvbhgE",
            "IAMoBSJkCgdTZXJMaW5lEisKCGxlZnROb2RlGAEgASgLMhkuTGV5U3RvbmVF",
            "bmdpbmUuU2VyVmVjdG9yEiwKCXJpZ2h0Tm9kZRgCIAEoCzIZLkxleVN0b25l",
            "RW5naW5lLlNlclZlY3RvciLTAwoPU2VyUHJpbVRyaWFuZ2xlEikKBnBvaW50",
            "MRgBIAEoCzIZLkxleVN0b25lRW5naW5lLlNlclZlY3RvchIpCgZwb2ludDIY",
            "AiABKAsyGS5MZXlTdG9uZUVuZ2luZS5TZXJWZWN0b3ISKQoGcG9pbnQzGAMg",
            "ASgLMhkuTGV5U3RvbmVFbmdpbmUuU2VyVmVjdG9yEigKBmNvbG9yMRgEIAEo",
            "CzIYLkxleVN0b25lRW5naW5lLlNlckNvbG9yEigKBmNvbG9yMhgFIAEoCzIY",
            "LkxleVN0b25lRW5naW5lLlNlckNvbG9yEigKBmNvbG9yMxgGIAEoCzIYLkxl",
            "eVN0b25lRW5naW5lLlNlckNvbG9yEjAKDXRleHR1cmVDb29yZDEYByABKAsy",
            "GS5MZXlTdG9uZUVuZ2luZS5TZXJWZWN0b3ISMAoNdGV4dHVyZUNvb3JkMhgI",
            "IAEoCzIZLkxleVN0b25lRW5naW5lLlNlclZlY3RvchIwCg10ZXh0dXJlQ29v",
            "cmQzGAkgASgLMhkuTGV5U3RvbmVFbmdpbmUuU2VyVmVjdG9yEisKB3RleHR1",
            "cmUYCiABKAsyGi5MZXlTdG9uZUVuZ2luZS5TZXJUZXh0dXJlIkQKDlNlclBy",
            "aW1Qb2x5Z29uEjIKCXRyaWFuZ2xlcxgBIAMoCzIfLkxleVN0b25lRW5naW5l",
            "LlNlclByaW1UcmlhbmdsZSKUAQoKU2VyUG9seWdvbhIrCgh2ZXJ0aWNlcxgC",
            "IAMoCzIZLkxleVN0b25lRW5naW5lLlNlclZlY3RvchIoCgZjb2xvcnMYAyAD",
            "KAsyGC5MZXlTdG9uZUVuZ2luZS5TZXJDb2xvchIvCgt0ZXh0dXJlbmFtZRgE",
            "IAEoCzIaLkxleVN0b25lRW5naW5lLlNlclRleHR1cmUiRAoKU2VyVGV4dHVy",
            "ZRIMCgRuYW1lGAEgASgJEigKBXNjYWxlGAIgASgLMhkuTGV5U3RvbmVFbmdp",
            "bmUuU2VyVmVjdG9yIjYKCFNlckNvbG9yEgkKAXIYASABKAUSCQoBZxgCIAEo",
            "BRIJCgFiGAMgASgFEgkKAWEYBCABKAUipQEKClNlclRyaWdnZXISDAoEdHlw",
            "ZRgBIAEoBRIXCg90cmlnZ2VyZWRCeVR5cGUYAiABKAUSKwoIcG9zaXRpb24Y",
            "AyABKAsyGS5MZXlTdG9uZUVuZ2luZS5TZXJWZWN0b3ISJwoEc2l6ZRgEIAEo",
            "CzIZLkxleVN0b25lRW5naW5lLlNlclZlY3RvchIaChJ0cmlnZ2VyQWN0aW9u",
            "SW5kZXgYBSABKAUi9wEKCFNlcldvcmxkEg0KBWluZGV4GAEgASgFEicKBHNp",
            "emUYAiABKAsyGS5MZXlTdG9uZUVuZ2luZS5TZXJWZWN0b3ISJgoFbGluZXMY",
            "AyADKAsyFy5MZXlTdG9uZUVuZ2luZS5TZXJMaW5lEisKCGVudGl0aWVzGAQg",
            "AygLMhkuTGV5U3RvbmVFbmdpbmUuU2VyRW50aXR5EjAKCHBvbHlnb25zGAUg",
            "AygLMh4uTGV5U3RvbmVFbmdpbmUuU2VyUHJpbVBvbHlnb24SLAoIdHJpZ2dl",
            "cnMYBiADKAsyGi5MZXlTdG9uZUVuZ2luZS5TZXJUcmlnZ2VyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LeyStoneEngine.SerVector), global::LeyStoneEngine.SerVector.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LeyStoneEngine.SerEntity), global::LeyStoneEngine.SerEntity.Parser, new[]{ "Type", "SubType", "Position", "AdditionalInformation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LeyStoneEngine.SerLine), global::LeyStoneEngine.SerLine.Parser, new[]{ "LeftNode", "RightNode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LeyStoneEngine.SerPrimTriangle), global::LeyStoneEngine.SerPrimTriangle.Parser, new[]{ "Point1", "Point2", "Point3", "Color1", "Color2", "Color3", "TextureCoord1", "TextureCoord2", "TextureCoord3", "Texture" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LeyStoneEngine.SerPrimPolygon), global::LeyStoneEngine.SerPrimPolygon.Parser, new[]{ "Triangles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LeyStoneEngine.SerPolygon), global::LeyStoneEngine.SerPolygon.Parser, new[]{ "Vertices", "Colors", "Texturename" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LeyStoneEngine.SerTexture), global::LeyStoneEngine.SerTexture.Parser, new[]{ "Name", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LeyStoneEngine.SerColor), global::LeyStoneEngine.SerColor.Parser, new[]{ "R", "G", "B", "A" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LeyStoneEngine.SerTrigger), global::LeyStoneEngine.SerTrigger.Parser, new[]{ "Type", "TriggeredByType", "Position", "Size", "TriggerActionIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LeyStoneEngine.SerWorld), global::LeyStoneEngine.SerWorld.Parser, new[]{ "Index", "Size", "Lines", "Entities", "Polygons", "Triggers" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SerVector : pb::IMessage<SerVector> {
    private static readonly pb::MessageParser<SerVector> _parser = new pb::MessageParser<SerVector>(() => new SerVector());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerVector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LeyStoneEngine.WorldReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerVector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerVector(SerVector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerVector Clone() {
      return new SerVector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerVector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerVector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerVector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerEntity : pb::IMessage<SerEntity> {
    private static readonly pb::MessageParser<SerEntity> _parser = new pb::MessageParser<SerEntity>(() => new SerEntity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LeyStoneEngine.WorldReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerEntity(SerEntity other) : this() {
      type_ = other.type_;
      subType_ = other.subType_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      additionalInformation_ = other.additionalInformation_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerEntity Clone() {
      return new SerEntity(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 2;
    private int subType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::LeyStoneEngine.SerVector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "additionalInformation" field.</summary>
    public const int AdditionalInformationFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_additionalInformation_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> additionalInformation_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Additional preset information; for instance, for VisualPolygonParticle, as we do not save a polygon.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AdditionalInformation {
      get { return additionalInformation_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (SubType != other.SubType) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if(!additionalInformation_.Equals(other.additionalInformation_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SubType != 0) hash ^= SubType.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      hash ^= additionalInformation_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (SubType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubType);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      additionalInformation_.WriteTo(output, _repeated_additionalInformation_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubType);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      size += additionalInformation_.CalculateSize(_repeated_additionalInformation_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerEntity other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::LeyStoneEngine.SerVector();
        }
        Position.MergeFrom(other.Position);
      }
      additionalInformation_.Add(other.additionalInformation_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            SubType = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(position_);
            break;
          }
          case 34:
          case 32: {
            additionalInformation_.AddEntriesFrom(input, _repeated_additionalInformation_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerLine : pb::IMessage<SerLine> {
    private static readonly pb::MessageParser<SerLine> _parser = new pb::MessageParser<SerLine>(() => new SerLine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LeyStoneEngine.WorldReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerLine(SerLine other) : this() {
      LeftNode = other.leftNode_ != null ? other.LeftNode.Clone() : null;
      RightNode = other.rightNode_ != null ? other.RightNode.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerLine Clone() {
      return new SerLine(this);
    }

    /// <summary>Field number for the "leftNode" field.</summary>
    public const int LeftNodeFieldNumber = 1;
    private global::LeyStoneEngine.SerVector leftNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector LeftNode {
      get { return leftNode_; }
      set {
        leftNode_ = value;
      }
    }

    /// <summary>Field number for the "rightNode" field.</summary>
    public const int RightNodeFieldNumber = 2;
    private global::LeyStoneEngine.SerVector rightNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector RightNode {
      get { return rightNode_; }
      set {
        rightNode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LeftNode, other.LeftNode)) return false;
      if (!object.Equals(RightNode, other.RightNode)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (leftNode_ != null) hash ^= LeftNode.GetHashCode();
      if (rightNode_ != null) hash ^= RightNode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (leftNode_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LeftNode);
      }
      if (rightNode_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RightNode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (leftNode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftNode);
      }
      if (rightNode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightNode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerLine other) {
      if (other == null) {
        return;
      }
      if (other.leftNode_ != null) {
        if (leftNode_ == null) {
          leftNode_ = new global::LeyStoneEngine.SerVector();
        }
        LeftNode.MergeFrom(other.LeftNode);
      }
      if (other.rightNode_ != null) {
        if (rightNode_ == null) {
          rightNode_ = new global::LeyStoneEngine.SerVector();
        }
        RightNode.MergeFrom(other.RightNode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (leftNode_ == null) {
              leftNode_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(leftNode_);
            break;
          }
          case 18: {
            if (rightNode_ == null) {
              rightNode_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(rightNode_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerPrimTriangle : pb::IMessage<SerPrimTriangle> {
    private static readonly pb::MessageParser<SerPrimTriangle> _parser = new pb::MessageParser<SerPrimTriangle>(() => new SerPrimTriangle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerPrimTriangle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LeyStoneEngine.WorldReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPrimTriangle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPrimTriangle(SerPrimTriangle other) : this() {
      Point1 = other.point1_ != null ? other.Point1.Clone() : null;
      Point2 = other.point2_ != null ? other.Point2.Clone() : null;
      Point3 = other.point3_ != null ? other.Point3.Clone() : null;
      Color1 = other.color1_ != null ? other.Color1.Clone() : null;
      Color2 = other.color2_ != null ? other.Color2.Clone() : null;
      Color3 = other.color3_ != null ? other.Color3.Clone() : null;
      TextureCoord1 = other.textureCoord1_ != null ? other.TextureCoord1.Clone() : null;
      TextureCoord2 = other.textureCoord2_ != null ? other.TextureCoord2.Clone() : null;
      TextureCoord3 = other.textureCoord3_ != null ? other.TextureCoord3.Clone() : null;
      Texture = other.texture_ != null ? other.Texture.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPrimTriangle Clone() {
      return new SerPrimTriangle(this);
    }

    /// <summary>Field number for the "point1" field.</summary>
    public const int Point1FieldNumber = 1;
    private global::LeyStoneEngine.SerVector point1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector Point1 {
      get { return point1_; }
      set {
        point1_ = value;
      }
    }

    /// <summary>Field number for the "point2" field.</summary>
    public const int Point2FieldNumber = 2;
    private global::LeyStoneEngine.SerVector point2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector Point2 {
      get { return point2_; }
      set {
        point2_ = value;
      }
    }

    /// <summary>Field number for the "point3" field.</summary>
    public const int Point3FieldNumber = 3;
    private global::LeyStoneEngine.SerVector point3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector Point3 {
      get { return point3_; }
      set {
        point3_ = value;
      }
    }

    /// <summary>Field number for the "color1" field.</summary>
    public const int Color1FieldNumber = 4;
    private global::LeyStoneEngine.SerColor color1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerColor Color1 {
      get { return color1_; }
      set {
        color1_ = value;
      }
    }

    /// <summary>Field number for the "color2" field.</summary>
    public const int Color2FieldNumber = 5;
    private global::LeyStoneEngine.SerColor color2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerColor Color2 {
      get { return color2_; }
      set {
        color2_ = value;
      }
    }

    /// <summary>Field number for the "color3" field.</summary>
    public const int Color3FieldNumber = 6;
    private global::LeyStoneEngine.SerColor color3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerColor Color3 {
      get { return color3_; }
      set {
        color3_ = value;
      }
    }

    /// <summary>Field number for the "textureCoord1" field.</summary>
    public const int TextureCoord1FieldNumber = 7;
    private global::LeyStoneEngine.SerVector textureCoord1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector TextureCoord1 {
      get { return textureCoord1_; }
      set {
        textureCoord1_ = value;
      }
    }

    /// <summary>Field number for the "textureCoord2" field.</summary>
    public const int TextureCoord2FieldNumber = 8;
    private global::LeyStoneEngine.SerVector textureCoord2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector TextureCoord2 {
      get { return textureCoord2_; }
      set {
        textureCoord2_ = value;
      }
    }

    /// <summary>Field number for the "textureCoord3" field.</summary>
    public const int TextureCoord3FieldNumber = 9;
    private global::LeyStoneEngine.SerVector textureCoord3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector TextureCoord3 {
      get { return textureCoord3_; }
      set {
        textureCoord3_ = value;
      }
    }

    /// <summary>Field number for the "texture" field.</summary>
    public const int TextureFieldNumber = 10;
    private global::LeyStoneEngine.SerTexture texture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerTexture Texture {
      get { return texture_; }
      set {
        texture_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerPrimTriangle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerPrimTriangle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Point1, other.Point1)) return false;
      if (!object.Equals(Point2, other.Point2)) return false;
      if (!object.Equals(Point3, other.Point3)) return false;
      if (!object.Equals(Color1, other.Color1)) return false;
      if (!object.Equals(Color2, other.Color2)) return false;
      if (!object.Equals(Color3, other.Color3)) return false;
      if (!object.Equals(TextureCoord1, other.TextureCoord1)) return false;
      if (!object.Equals(TextureCoord2, other.TextureCoord2)) return false;
      if (!object.Equals(TextureCoord3, other.TextureCoord3)) return false;
      if (!object.Equals(Texture, other.Texture)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (point1_ != null) hash ^= Point1.GetHashCode();
      if (point2_ != null) hash ^= Point2.GetHashCode();
      if (point3_ != null) hash ^= Point3.GetHashCode();
      if (color1_ != null) hash ^= Color1.GetHashCode();
      if (color2_ != null) hash ^= Color2.GetHashCode();
      if (color3_ != null) hash ^= Color3.GetHashCode();
      if (textureCoord1_ != null) hash ^= TextureCoord1.GetHashCode();
      if (textureCoord2_ != null) hash ^= TextureCoord2.GetHashCode();
      if (textureCoord3_ != null) hash ^= TextureCoord3.GetHashCode();
      if (texture_ != null) hash ^= Texture.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (point1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Point1);
      }
      if (point2_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point2);
      }
      if (point3_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Point3);
      }
      if (color1_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Color1);
      }
      if (color2_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Color2);
      }
      if (color3_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color3);
      }
      if (textureCoord1_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(TextureCoord1);
      }
      if (textureCoord2_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TextureCoord2);
      }
      if (textureCoord3_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TextureCoord3);
      }
      if (texture_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Texture);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (point1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point1);
      }
      if (point2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point2);
      }
      if (point3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point3);
      }
      if (color1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color1);
      }
      if (color2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color2);
      }
      if (color3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color3);
      }
      if (textureCoord1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextureCoord1);
      }
      if (textureCoord2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextureCoord2);
      }
      if (textureCoord3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextureCoord3);
      }
      if (texture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Texture);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerPrimTriangle other) {
      if (other == null) {
        return;
      }
      if (other.point1_ != null) {
        if (point1_ == null) {
          point1_ = new global::LeyStoneEngine.SerVector();
        }
        Point1.MergeFrom(other.Point1);
      }
      if (other.point2_ != null) {
        if (point2_ == null) {
          point2_ = new global::LeyStoneEngine.SerVector();
        }
        Point2.MergeFrom(other.Point2);
      }
      if (other.point3_ != null) {
        if (point3_ == null) {
          point3_ = new global::LeyStoneEngine.SerVector();
        }
        Point3.MergeFrom(other.Point3);
      }
      if (other.color1_ != null) {
        if (color1_ == null) {
          color1_ = new global::LeyStoneEngine.SerColor();
        }
        Color1.MergeFrom(other.Color1);
      }
      if (other.color2_ != null) {
        if (color2_ == null) {
          color2_ = new global::LeyStoneEngine.SerColor();
        }
        Color2.MergeFrom(other.Color2);
      }
      if (other.color3_ != null) {
        if (color3_ == null) {
          color3_ = new global::LeyStoneEngine.SerColor();
        }
        Color3.MergeFrom(other.Color3);
      }
      if (other.textureCoord1_ != null) {
        if (textureCoord1_ == null) {
          textureCoord1_ = new global::LeyStoneEngine.SerVector();
        }
        TextureCoord1.MergeFrom(other.TextureCoord1);
      }
      if (other.textureCoord2_ != null) {
        if (textureCoord2_ == null) {
          textureCoord2_ = new global::LeyStoneEngine.SerVector();
        }
        TextureCoord2.MergeFrom(other.TextureCoord2);
      }
      if (other.textureCoord3_ != null) {
        if (textureCoord3_ == null) {
          textureCoord3_ = new global::LeyStoneEngine.SerVector();
        }
        TextureCoord3.MergeFrom(other.TextureCoord3);
      }
      if (other.texture_ != null) {
        if (texture_ == null) {
          texture_ = new global::LeyStoneEngine.SerTexture();
        }
        Texture.MergeFrom(other.Texture);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (point1_ == null) {
              point1_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(point1_);
            break;
          }
          case 18: {
            if (point2_ == null) {
              point2_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(point2_);
            break;
          }
          case 26: {
            if (point3_ == null) {
              point3_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(point3_);
            break;
          }
          case 34: {
            if (color1_ == null) {
              color1_ = new global::LeyStoneEngine.SerColor();
            }
            input.ReadMessage(color1_);
            break;
          }
          case 42: {
            if (color2_ == null) {
              color2_ = new global::LeyStoneEngine.SerColor();
            }
            input.ReadMessage(color2_);
            break;
          }
          case 50: {
            if (color3_ == null) {
              color3_ = new global::LeyStoneEngine.SerColor();
            }
            input.ReadMessage(color3_);
            break;
          }
          case 58: {
            if (textureCoord1_ == null) {
              textureCoord1_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(textureCoord1_);
            break;
          }
          case 66: {
            if (textureCoord2_ == null) {
              textureCoord2_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(textureCoord2_);
            break;
          }
          case 74: {
            if (textureCoord3_ == null) {
              textureCoord3_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(textureCoord3_);
            break;
          }
          case 82: {
            if (texture_ == null) {
              texture_ = new global::LeyStoneEngine.SerTexture();
            }
            input.ReadMessage(texture_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerPrimPolygon : pb::IMessage<SerPrimPolygon> {
    private static readonly pb::MessageParser<SerPrimPolygon> _parser = new pb::MessageParser<SerPrimPolygon>(() => new SerPrimPolygon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerPrimPolygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LeyStoneEngine.WorldReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPrimPolygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPrimPolygon(SerPrimPolygon other) : this() {
      triangles_ = other.triangles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPrimPolygon Clone() {
      return new SerPrimPolygon(this);
    }

    /// <summary>Field number for the "triangles" field.</summary>
    public const int TrianglesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LeyStoneEngine.SerPrimTriangle> _repeated_triangles_codec
        = pb::FieldCodec.ForMessage(10, global::LeyStoneEngine.SerPrimTriangle.Parser);
    private readonly pbc::RepeatedField<global::LeyStoneEngine.SerPrimTriangle> triangles_ = new pbc::RepeatedField<global::LeyStoneEngine.SerPrimTriangle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LeyStoneEngine.SerPrimTriangle> Triangles {
      get { return triangles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerPrimPolygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerPrimPolygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!triangles_.Equals(other.triangles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= triangles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      triangles_.WriteTo(output, _repeated_triangles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += triangles_.CalculateSize(_repeated_triangles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerPrimPolygon other) {
      if (other == null) {
        return;
      }
      triangles_.Add(other.triangles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            triangles_.AddEntriesFrom(input, _repeated_triangles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerPolygon : pb::IMessage<SerPolygon> {
    private static readonly pb::MessageParser<SerPolygon> _parser = new pb::MessageParser<SerPolygon>(() => new SerPolygon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerPolygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LeyStoneEngine.WorldReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPolygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPolygon(SerPolygon other) : this() {
      vertices_ = other.vertices_.Clone();
      colors_ = other.colors_.Clone();
      Texturename = other.texturename_ != null ? other.Texturename.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPolygon Clone() {
      return new SerPolygon(this);
    }

    /// <summary>Field number for the "vertices" field.</summary>
    public const int VerticesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LeyStoneEngine.SerVector> _repeated_vertices_codec
        = pb::FieldCodec.ForMessage(18, global::LeyStoneEngine.SerVector.Parser);
    private readonly pbc::RepeatedField<global::LeyStoneEngine.SerVector> vertices_ = new pbc::RepeatedField<global::LeyStoneEngine.SerVector>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LeyStoneEngine.SerVector> Vertices {
      get { return vertices_; }
    }

    /// <summary>Field number for the "colors" field.</summary>
    public const int ColorsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LeyStoneEngine.SerColor> _repeated_colors_codec
        = pb::FieldCodec.ForMessage(26, global::LeyStoneEngine.SerColor.Parser);
    private readonly pbc::RepeatedField<global::LeyStoneEngine.SerColor> colors_ = new pbc::RepeatedField<global::LeyStoneEngine.SerColor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LeyStoneEngine.SerColor> Colors {
      get { return colors_; }
    }

    /// <summary>Field number for the "texturename" field.</summary>
    public const int TexturenameFieldNumber = 4;
    private global::LeyStoneEngine.SerTexture texturename_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerTexture Texturename {
      get { return texturename_; }
      set {
        texturename_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerPolygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerPolygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vertices_.Equals(other.vertices_)) return false;
      if(!colors_.Equals(other.colors_)) return false;
      if (!object.Equals(Texturename, other.Texturename)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vertices_.GetHashCode();
      hash ^= colors_.GetHashCode();
      if (texturename_ != null) hash ^= Texturename.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vertices_.WriteTo(output, _repeated_vertices_codec);
      colors_.WriteTo(output, _repeated_colors_codec);
      if (texturename_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Texturename);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vertices_.CalculateSize(_repeated_vertices_codec);
      size += colors_.CalculateSize(_repeated_colors_codec);
      if (texturename_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Texturename);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerPolygon other) {
      if (other == null) {
        return;
      }
      vertices_.Add(other.vertices_);
      colors_.Add(other.colors_);
      if (other.texturename_ != null) {
        if (texturename_ == null) {
          texturename_ = new global::LeyStoneEngine.SerTexture();
        }
        Texturename.MergeFrom(other.Texturename);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            vertices_.AddEntriesFrom(input, _repeated_vertices_codec);
            break;
          }
          case 26: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
          case 34: {
            if (texturename_ == null) {
              texturename_ = new global::LeyStoneEngine.SerTexture();
            }
            input.ReadMessage(texturename_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerTexture : pb::IMessage<SerTexture> {
    private static readonly pb::MessageParser<SerTexture> _parser = new pb::MessageParser<SerTexture>(() => new SerTexture());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerTexture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LeyStoneEngine.WorldReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTexture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTexture(SerTexture other) : this() {
      name_ = other.name_;
      Scale = other.scale_ != null ? other.Scale.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTexture Clone() {
      return new SerTexture(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private global::LeyStoneEngine.SerVector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerTexture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerTexture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerTexture other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::LeyStoneEngine.SerVector();
        }
        Scale.MergeFrom(other.Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (scale_ == null) {
              scale_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(scale_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerColor : pb::IMessage<SerColor> {
    private static readonly pb::MessageParser<SerColor> _parser = new pb::MessageParser<SerColor>(() => new SerColor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LeyStoneEngine.WorldReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerColor(SerColor other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerColor Clone() {
      return new SerColor(this);
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    private int r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 2;
    private int g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 3;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      if (A != other.A) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (A != 0) hash ^= A.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(B);
      }
      if (A != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(A);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerColor other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
      if (other.A != 0) {
        A = other.A;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            R = input.ReadInt32();
            break;
          }
          case 16: {
            G = input.ReadInt32();
            break;
          }
          case 24: {
            B = input.ReadInt32();
            break;
          }
          case 32: {
            A = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerTrigger : pb::IMessage<SerTrigger> {
    private static readonly pb::MessageParser<SerTrigger> _parser = new pb::MessageParser<SerTrigger>(() => new SerTrigger());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LeyStoneEngine.WorldReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTrigger(SerTrigger other) : this() {
      type_ = other.type_;
      triggeredByType_ = other.triggeredByType_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Size = other.size_ != null ? other.Size.Clone() : null;
      triggerActionIndex_ = other.triggerActionIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTrigger Clone() {
      return new SerTrigger(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "triggeredByType" field.</summary>
    public const int TriggeredByTypeFieldNumber = 2;
    private int triggeredByType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggeredByType {
      get { return triggeredByType_; }
      set {
        triggeredByType_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::LeyStoneEngine.SerVector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 4;
    private global::LeyStoneEngine.SerVector size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "triggerActionIndex" field.</summary>
    public const int TriggerActionIndexFieldNumber = 5;
    private int triggerActionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerActionIndex {
      get { return triggerActionIndex_; }
      set {
        triggerActionIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TriggeredByType != other.TriggeredByType) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      if (TriggerActionIndex != other.TriggerActionIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (TriggeredByType != 0) hash ^= TriggeredByType.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      if (TriggerActionIndex != 0) hash ^= TriggerActionIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (TriggeredByType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TriggeredByType);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (size_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Size);
      }
      if (TriggerActionIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TriggerActionIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (TriggeredByType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggeredByType);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (TriggerActionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerActionIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerTrigger other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.TriggeredByType != 0) {
        TriggeredByType = other.TriggeredByType;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::LeyStoneEngine.SerVector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.size_ != null) {
        if (size_ == null) {
          size_ = new global::LeyStoneEngine.SerVector();
        }
        Size.MergeFrom(other.Size);
      }
      if (other.TriggerActionIndex != 0) {
        TriggerActionIndex = other.TriggerActionIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            TriggeredByType = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(position_);
            break;
          }
          case 34: {
            if (size_ == null) {
              size_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(size_);
            break;
          }
          case 40: {
            TriggerActionIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerWorld : pb::IMessage<SerWorld> {
    private static readonly pb::MessageParser<SerWorld> _parser = new pb::MessageParser<SerWorld>(() => new SerWorld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LeyStoneEngine.WorldReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerWorld(SerWorld other) : this() {
      index_ = other.index_;
      Size = other.size_ != null ? other.Size.Clone() : null;
      lines_ = other.lines_.Clone();
      entities_ = other.entities_.Clone();
      polygons_ = other.polygons_.Clone();
      triggers_ = other.triggers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerWorld Clone() {
      return new SerWorld(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private global::LeyStoneEngine.SerVector size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LeyStoneEngine.SerVector Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LeyStoneEngine.SerLine> _repeated_lines_codec
        = pb::FieldCodec.ForMessage(26, global::LeyStoneEngine.SerLine.Parser);
    private readonly pbc::RepeatedField<global::LeyStoneEngine.SerLine> lines_ = new pbc::RepeatedField<global::LeyStoneEngine.SerLine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LeyStoneEngine.SerLine> Lines {
      get { return lines_; }
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int EntitiesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::LeyStoneEngine.SerEntity> _repeated_entities_codec
        = pb::FieldCodec.ForMessage(34, global::LeyStoneEngine.SerEntity.Parser);
    private readonly pbc::RepeatedField<global::LeyStoneEngine.SerEntity> entities_ = new pbc::RepeatedField<global::LeyStoneEngine.SerEntity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LeyStoneEngine.SerEntity> Entities {
      get { return entities_; }
    }

    /// <summary>Field number for the "polygons" field.</summary>
    public const int PolygonsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::LeyStoneEngine.SerPrimPolygon> _repeated_polygons_codec
        = pb::FieldCodec.ForMessage(42, global::LeyStoneEngine.SerPrimPolygon.Parser);
    private readonly pbc::RepeatedField<global::LeyStoneEngine.SerPrimPolygon> polygons_ = new pbc::RepeatedField<global::LeyStoneEngine.SerPrimPolygon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LeyStoneEngine.SerPrimPolygon> Polygons {
      get { return polygons_; }
    }

    /// <summary>Field number for the "triggers" field.</summary>
    public const int TriggersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::LeyStoneEngine.SerTrigger> _repeated_triggers_codec
        = pb::FieldCodec.ForMessage(50, global::LeyStoneEngine.SerTrigger.Parser);
    private readonly pbc::RepeatedField<global::LeyStoneEngine.SerTrigger> triggers_ = new pbc::RepeatedField<global::LeyStoneEngine.SerTrigger>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LeyStoneEngine.SerTrigger> Triggers {
      get { return triggers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Size, other.Size)) return false;
      if(!lines_.Equals(other.lines_)) return false;
      if(!entities_.Equals(other.entities_)) return false;
      if(!polygons_.Equals(other.polygons_)) return false;
      if(!triggers_.Equals(other.triggers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      hash ^= lines_.GetHashCode();
      hash ^= entities_.GetHashCode();
      hash ^= polygons_.GetHashCode();
      hash ^= triggers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (size_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Size);
      }
      lines_.WriteTo(output, _repeated_lines_codec);
      entities_.WriteTo(output, _repeated_entities_codec);
      polygons_.WriteTo(output, _repeated_polygons_codec);
      triggers_.WriteTo(output, _repeated_triggers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      size += lines_.CalculateSize(_repeated_lines_codec);
      size += entities_.CalculateSize(_repeated_entities_codec);
      size += polygons_.CalculateSize(_repeated_polygons_codec);
      size += triggers_.CalculateSize(_repeated_triggers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerWorld other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.size_ != null) {
        if (size_ == null) {
          size_ = new global::LeyStoneEngine.SerVector();
        }
        Size.MergeFrom(other.Size);
      }
      lines_.Add(other.lines_);
      entities_.Add(other.entities_);
      polygons_.Add(other.polygons_);
      triggers_.Add(other.triggers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (size_ == null) {
              size_ = new global::LeyStoneEngine.SerVector();
            }
            input.ReadMessage(size_);
            break;
          }
          case 26: {
            lines_.AddEntriesFrom(input, _repeated_lines_codec);
            break;
          }
          case 34: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
          case 42: {
            polygons_.AddEntriesFrom(input, _repeated_polygons_codec);
            break;
          }
          case 50: {
            triggers_.AddEntriesFrom(input, _repeated_triggers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
